create database DB_LIBALOT;

use DB_LIBALOT;

/*****
Drop every trigger
******/
drop trigger if exists TG_PROTEIN_INSERT;
drop trigger if exists TG_PROTEIN_UPDATE;
drop trigger if exists TG_PROTEIN_DELETE;

drop trigger if exists TG_SEQUENCE_INSERT;
drop trigger if exists TG_SEQUENCE_UPDATE;
drop trigger if exists TG_SEQUENCE_DELETE;

drop trigger if exists TG_MUTATION_INSERT;
drop trigger if exists TG_MUTATION_UPDATE;
drop trigger if exists TG_MUTATION_DELETE;

drop trigger if exists TG_POINT_MUTATION_INSERT;
drop trigger if exists TG_POINT_MUTATION_UPDATE;
drop trigger if exists TG_POINT_MUTATION_DELETE;

drop trigger if exists TG_STRUCTURE_INSERT;
drop trigger if exists TG_STRUCTURE_UPDATE;
drop trigger if exists TG_STRUCTURE_DELETE;

drop trigger if exists TG_CHAIN_INSERT;
drop trigger if exists TG_CHAIN_UPDATE;
drop trigger if exists TG_CHAIN_DELETE;

drop trigger if exists TG_CHAIN_SEQUENCE_INSERT;
drop trigger if exists TG_CHAIN_SEQUENCE_UPDATE;
drop trigger if exists TG_CHAIN_SEQUENCE_DELETE;

drop trigger if exists TG_JOB_INSERT;
drop trigger if exists TG_JOB_UPDATE;
drop trigger if exists TG_JOB_DELETE;

/*****
Drop every view
******/
drop view if exists VW_PROTEIN_SEQUENCE;
drop view if exists VW_MUTATION;
drop view if exists VW_DISTRIBUTION_AUX;
drop view if exists VW_DISTRIBUTION;
drop view if exists VW_JOB;

/*****
Drop every table
******/
drop table if exists TB_MODULE1;

drop table if exists TB_MODULE2;

drop table if exists TB_JOB_LOG;
drop table if exists TB_JOB;

drop table if exists TB_CHAIN_SEQUENCE_LOG;
drop table if exists TB_CHAIN_SEQUENCE;

drop table if exists TB_CHAIN_LOG;
drop table if exists TB_CHAIN;

drop table if exists TB_STRUCTURE_LOG;
drop table if exists TB_STRUCTURE;

drop table if exists TB_POINT_MUTATION_LOG;
drop table if exists TB_POINT_MUTATION;

drop table if exists TB_MUTATION_LOG;
drop table if exists TB_MUTATION;

drop table if exists TB_SEQUENCE_LOG;
drop table if exists TB_SEQUENCE;

drop table if exists TB_PROTEIN_LOG;
drop table if exists TB_PROTEIN;


/*****
The table of proteins
******/
create table TB_PROTEIN (
	PROTEIN_ID int(10) unsigned not null auto_increment,

	PROTEIN_ENTRY_NAME varchar(10) not null,
	PROTEIN_NAME varchar(255) not null,
	PROTEIN_IS_WILD_TYPE tinyint(1) not null default '1',
	PROTEIN_COMMENT varchar(255) null default null,

	PROTEIN_CREATION timestamp not null default current_timestamp,

	primary key (PROTEIN_ID),

	unique key KY_PROTEIN_ENTRY_NAME (PROTEIN_ENTRY_NAME)
);

create table TB_PROTEIN_LOG (
	PROTEIN_LOG_ID int(10) unsigned not null auto_increment,
	PROTEIN_LOG_OPERATION enum('INSERT','UPDATE','DELETE'),
	PROTEIN_LOG_DATE timestamp not null default current_timestamp,

	PROTEIN_LOG_PROTEIN_ID int(10) unsigned not null,

	PROTEIN_LOG_OLD_ENTRY_NAME varchar(10) null,
	PROTEIN_LOG_OLD_NAME varchar(255) null,
	PROTEIN_LOG_OLD_IS_WILD_TYPE tinyint(1) null,
	PROTEIN_LOG_OLD_COMMENT varchar(255) null,

	PROTEIN_LOG_NEW_ENTRY_NAME varchar(10) null,
	PROTEIN_LOG_NEW_NAME varchar(255) null,
	PROTEIN_LOG_NEW_IS_WILD_TYPE tinyint(1) null,
	PROTEIN_LOG_NEW_COMMENT varchar(255) null,

	primary key (PROTEIN_LOG_ID)
);

create trigger TG_PROTEIN_INSERT after insert on TB_PROTEIN
	for each row
		insert into TB_PROTEIN_LOG (
				PROTEIN_LOG_OPERATION,
				PROTEIN_LOG_PROTEIN_ID,
				PROTEIN_LOG_OLD_ENTRY_NAME,
				PROTEIN_LOG_OLD_NAME,
				PROTEIN_LOG_OLD_IS_WILD_TYPE,
				PROTEIN_LOG_OLD_COMMENT,
				PROTEIN_LOG_NEW_ENTRY_NAME,
				PROTEIN_LOG_NEW_NAME,
				PROTEIN_LOG_NEW_IS_WILD_TYPE,
				PROTEIN_LOG_NEW_COMMENT
			) values (
				'INSERT',
				new.PROTEIN_ID,
				null,
				null,
				null,
				null,
				new.PROTEIN_ENTRY_NAME,
				new.PROTEIN_NAME,
				new.PROTEIN_IS_WILD_TYPE,
				new.PROTEIN_COMMENT
			);

create trigger TG_PROTEIN_UPDATE after update on TB_PROTEIN
	for each row
		insert into TB_PROTEIN_LOG (
				PROTEIN_LOG_OPERATION,
				PROTEIN_LOG_PROTEIN_ID,
				PROTEIN_LOG_OLD_ENTRY_NAME,
				PROTEIN_LOG_OLD_NAME,
				PROTEIN_LOG_OLD_IS_WILD_TYPE,
				PROTEIN_LOG_OLD_COMMENT,
				PROTEIN_LOG_NEW_ENTRY_NAME,
				PROTEIN_LOG_NEW_NAME,
				PROTEIN_LOG_NEW_IS_WILD_TYPE,
				PROTEIN_LOG_NEW_COMMENT
			) values (
				'UPDATE',
				new.PROTEIN_ID,
				old.PROTEIN_ENTRY_NAME,
				old.PROTEIN_NAME,
				old.PROTEIN_IS_WILD_TYPE,
				old.PROTEIN_COMMENT,
				new.PROTEIN_ENTRY_NAME,
				new.PROTEIN_NAME,
				new.PROTEIN_IS_WILD_TYPE,
				new.PROTEIN_COMMENT
			);

create trigger TG_PROTEIN_DELETE before delete on TB_PROTEIN
	for each row
		insert into TB_PROTEIN_LOG (
				PROTEIN_LOG_OPERATION,
				PROTEIN_LOG_PROTEIN_ID,
				PROTEIN_LOG_OLD_ENTRY_NAME,
				PROTEIN_LOG_OLD_NAME,
				PROTEIN_LOG_OLD_IS_WILD_TYPE,
				PROTEIN_LOG_OLD_COMMENT,
				PROTEIN_LOG_NEW_ENTRY_NAME,
				PROTEIN_LOG_NEW_NAME,
				PROTEIN_LOG_NEW_IS_WILD_TYPE,
				PROTEIN_LOG_NEW_COMMENT
			) values (
				'DELETE',
				old.PROTEIN_ID,
				old.PROTEIN_ENTRY_NAME,
				old.PROTEIN_NAME,
				old.PROTEIN_IS_WILD_TYPE,
				old.PROTEIN_COMMENT,
				null,
				null,
				null,
				null
			);

/*****
The table of sequences
******/
create table TB_SEQUENCE (
	SEQUENCE_ID int(10) unsigned not null auto_increment,

	SEQUENCE_RESIDUES text not null,
	SEQUENCE_UNIPROT_ID varchar(10) not null,
	SEQUENCE_PROTEIN_ID int(10) unsigned not null,
	SEQUENCE_ISOFORM_NUMBER int(10) unsigned not null,
	SEQUENCE_ISOFORM_NAME char(255) null,

	SEQUENCE_CREATION timestamp not null default current_timestamp,

	primary key (SEQUENCE_ID),

	unique key KY_SEQUENCE_UNIPROT_ID_ISOFORM_NUMBER (SEQUENCE_UNIPROT_ID, SEQUENCE_ISOFORM_NUMBER),

	key KY_SEQUENCE_PROTEIN_ID (SEQUENCE_PROTEIN_ID),
	constraint FK_SEQUENCE_PROTEIN_ID foreign key (SEQUENCE_PROTEIN_ID) references TB_PROTEIN (PROTEIN_ID) on delete no action on update no action
);

create table TB_SEQUENCE_LOG (
	SEQUENCE_LOG_ID int(10) unsigned not null auto_increment,
	SEQUENCE_LOG_OPERATION enum('INSERT','UPDATE','DELETE'),
	SEQUENCE_LOG_DATE timestamp not null default current_timestamp,

	SEQUENCE_LOG_SEQUENCE_ID int(10) unsigned not null,

	SEQUENCE_LOG_OLD_RESIDUES text null,
	SEQUENCE_LOG_OLD_UNIPROT_ID varchar(10) null,
	SEQUENCE_LOG_OLD_PROTEIN_ID int(10) unsigned null,
	SEQUENCE_LOG_OLD_ISOFORM_NUMBER int(10) unsigned null,
	SEQUENCE_LOG_OLD_ISOFORM_NAME char(255) null,

	SEQUENCE_LOG_NEW_RESIDUES text null,
	SEQUENCE_LOG_NEW_UNIPROT_ID varchar(10) null,
	SEQUENCE_LOG_NEW_PROTEIN_ID int(10) unsigned null,
	SEQUENCE_LOG_NEW_ISOFORM_NUMBER int(10) unsigned null,
	SEQUENCE_LOG_NEW_ISOFORM_NAME char(255) null,

	primary key (SEQUENCE_LOG_ID)
);

create trigger TG_SEQUENCE_INSERT after insert on TB_SEQUENCE
	for each row
		insert into TB_SEQUENCE_LOG (
			SEQUENCE_LOG_OPERATION,
			SEQUENCE_LOG_SEQUENCE_ID,
			SEQUENCE_LOG_OLD_RESIDUES,
			SEQUENCE_LOG_OLD_UNIPROT_ID,
			SEQUENCE_LOG_OLD_PROTEIN_ID,
			SEQUENCE_LOG_OLD_ISOFORM_NUMBER,
			SEQUENCE_LOG_OLD_ISOFORM_NAME,
			SEQUENCE_LOG_NEW_RESIDUES,
			SEQUENCE_LOG_NEW_UNIPROT_ID,
			SEQUENCE_LOG_NEW_PROTEIN_ID,
			SEQUENCE_LOG_NEW_ISOFORM_NUMBER,
			SEQUENCE_LOG_NEW_ISOFORM_NAME
		) values (
			'INSERT',
			new.SEQUENCE_ID,
			null,
			null,
			null,
			null,
			null,
			new.SEQUENCE_RESIDUES,
			new.SEQUENCE_UNIPROT_ID,
			new.SEQUENCE_PROTEIN_ID,
			new.SEQUENCE_ISOFORM_NUMBER,
			new.SEQUENCE_ISOFORM_NAME
		);

create trigger TG_SEQUENCE_UPDATE after update on TB_SEQUENCE
	for each row
		insert into TB_SEQUENCE_LOG (
			SEQUENCE_LOG_OPERATION,
			SEQUENCE_LOG_SEQUENCE_ID,
			SEQUENCE_LOG_OLD_RESIDUES,
			SEQUENCE_LOG_OLD_UNIPROT_ID,
			SEQUENCE_LOG_OLD_PROTEIN_ID,
			SEQUENCE_LOG_OLD_ISOFORM_NUMBER,
			SEQUENCE_LOG_OLD_ISOFORM_NAME,
			SEQUENCE_LOG_NEW_RESIDUES,
			SEQUENCE_LOG_NEW_UNIPROT_ID,
			SEQUENCE_LOG_NEW_PROTEIN_ID,
			SEQUENCE_LOG_NEW_ISOFORM_NUMBER,
			SEQUENCE_LOG_NEW_ISOFORM_NAME
		) values (
			'UPDATE',
			new.SEQUENCE_ID,
			old.SEQUENCE_RESIDUES,
			old.SEQUENCE_UNIPROT_ID,
			old.SEQUENCE_PROTEIN_ID,
			old.SEQUENCE_ISOFORM_NUMBER,
			old.SEQUENCE_ISOFORM_NAME,
			new.SEQUENCE_RESIDUES,
			new.SEQUENCE_UNIPROT_ID,
			new.SEQUENCE_PROTEIN_ID,
			new.SEQUENCE_ISOFORM_NUMBER,
			new.SEQUENCE_ISOFORM_NAME
		);

create trigger TG_SEQUENCE_DELETE before delete on TB_SEQUENCE
	for each row
		insert into TB_SEQUENCE_LOG (
			SEQUENCE_LOG_OPERATION,
			SEQUENCE_LOG_SEQUENCE_ID,
			SEQUENCE_LOG_OLD_RESIDUES,
			SEQUENCE_LOG_OLD_UNIPROT_ID,
			SEQUENCE_LOG_OLD_PROTEIN_ID,
			SEQUENCE_LOG_OLD_ISOFORM_NUMBER,
			SEQUENCE_LOG_OLD_ISOFORM_NAME,
			SEQUENCE_LOG_NEW_RESIDUES,
			SEQUENCE_LOG_NEW_UNIPROT_ID,
			SEQUENCE_LOG_NEW_PROTEIN_ID,
			SEQUENCE_LOG_NEW_ISOFORM_NUMBER,
			SEQUENCE_LOG_NEW_ISOFORM_NAME
		) values (
			'DELETE',
			old.SEQUENCE_ID,
			old.SEQUENCE_RESIDUES,
			old.SEQUENCE_UNIPROT_ID,
			old.SEQUENCE_PROTEIN_ID,
			old.SEQUENCE_ISOFORM_NUMBER,
			old.SEQUENCE_ISOFORM_NAME,
			null,
			null,
			null,
			null,
			null
		);

/*****
The tables for mutations
******/
create table TB_MUTATION (
	MUTATION_ID int(10) unsigned not null auto_increment,

	MUTATION_SEQUENCE_ID int(10) unsigned not null,
	MUTATION_COMMENT varchar(255) null,
	MUTATION_MUTATED_SEQUENCE_ID int(10) unsigned null,

	MUTATION_CREATION timestamp not null default current_timestamp,

	primary key (MUTATION_ID),

	key KY_MUTATION_SEQUENCE_ID (MUTATION_SEQUENCE_ID),
	constraint FK_MUTATION_SEQUENCE_ID foreign key (MUTATION_SEQUENCE_ID) references TB_SEQUENCE (SEQUENCE_ID) on delete no action on update no action,

	key KY_MUTATION_MUTATED_SEQUENCE_ID (MUTATION_SEQUENCE_ID),
	constraint FK_MUTATION_MUTATED_SEQUENCE_ID foreign key (MUTATION_MUTATED_SEQUENCE_ID) references TB_SEQUENCE (SEQUENCE_ID) on delete no action on update no action
);

create table TB_MUTATION_LOG (
	MUTATION_LOG_ID int(10) unsigned not null auto_increment,
	MUTATION_LOG_OPERATION enum('INSERT','UPDATE','DELETE'),
	MUTATION_LOG_DATE timestamp not null default current_timestamp,

	MUTATION_LOG_MUTATION_ID int(10) unsigned not null,

	MUTATION_LOG_OLD_MUTATION_SEQUENCE_ID int(10) unsigned null,
	MUTATION_LOG_OLD_MUTATION_COMMENT varchar(255) null,
	MUTATION_LOG_OLD_MUTATION_MUTATED_SEQUENCE_ID int(10) unsigned null,

	MUTATION_LOG_NEW_MUTATION_SEQUENCE_ID int(10) unsigned null,
	MUTATION_LOG_NEW_MUTATION_COMMENT varchar(255) null,
	MUTATION_LOG_NEW_MUTATION_MUTATED_SEQUENCE_ID int(10) unsigned null,

	primary key (MUTATION_LOG_ID)
);

create trigger TG_MUTATION_INSERT after insert on TB_MUTATION
	for each row
		insert into TB_MUTATION_LOG (
			MUTATION_LOG_OPERATION,
			MUTATION_LOG_MUTATION_ID,
			MUTATION_LOG_OLD_SEQUENCE_ID,
			MUTATION_LOG_OLD_COMMENT,
			MUTATION_LOG_OLD_MUTATED_SEQUENCE_ID,
			MUTATION_LOG_NEW_SEQUENCE_ID,
			MUTATION_LOG_NEW_COMMENT,
			MUTATION_LOG_NEW_MUTATED_SEQUENCE_ID
		) values (
			'INSERT',
			new.MUTATION_ID,
			null,
			null,
			null,
			new.MUTATION_SEQUENCE_ID,
			new.MUTATION_COMMENT,
			new.MUTATION_MUTATED_SEQUENCE_ID
		);

create trigger TG_MUTATION_UPDATE after update on TB_MUTATION
	for each row
		insert into TB_MUTATION_LOG (
			MUTATION_LOG_OPERATION,
			MUTATION_LOG_MUTATION_ID,
			MUTATION_LOG_OLD_SEQUENCE_ID,
			MUTATION_LOG_OLD_COMMENT,
			MUTATION_LOG_OLD_MUTATED_SEQUENCE_ID,
			MUTATION_LOG_NEW_SEQUENCE_ID,
			MUTATION_LOG_NEW_COMMENT,
			MUTATION_LOG_NEW_MUTATED_SEQUENCE_ID
		) values (
			'UPDATE',
			new.MUTATION_ID,
			old.MUTATION_SEQUENCE_ID,
			old.MUTATION_COMMENT,
			old.MUTATION_MUTATED_SEQUENCE_ID,
			new.MUTATION_SEQUENCE_ID,
			new.MUTATION_COMMENT,
			new.MUTATION_MUTATED_SEQUENCE_ID
		);

create trigger TG_MUTATION_DELETE before delete on TB_MUTATION
	for each row
		insert into TB_MUTATION_LOG (
			MUTATION_LOG_OPERATION,
			MUTATION_LOG_MUTATION_ID,
			MUTATION_LOG_OLD_SEQUENCE_ID,
			MUTATION_LOG_OLD_COMMENT,
			MUTATION_LOG_OLD_MUTATED_SEQUENCE_ID,
			MUTATION_LOG_NEW_SEQUENCE_ID,
			MUTATION_LOG_NEW_COMMENT,
			MUTATION_LOG_NEW_MUTATED_SEQUENCE_ID
		) values (
			'DELETE',
			old.MUTATION_ID,
			old.MUTATION_SEQUENCE_ID,
			old.MUTATION_COMMENT,
			old.MUTATION_MUTATED_SEQUENCE_ID,
			null,
			null,
			null
		);

create table TB_POINT_MUTATION (
	POINT_MUTATION_ID int(10) unsigned not null auto_increment,

	POINT_MUTATION_MUTATION_ID int(10) unsigned not null,
	POINT_MUTATION_OFFSET int(10) unsigned not null,
	POINT_MUTATION_RESIDUE char(1) not null,

	POINT_MUTATION_CREATION timestamp not null default current_timestamp,

	primary key (POINT_MUTATION_ID),

	key KY_POINT_MUTATION_MUTATION_ID (POINT_MUTATION_MUTATION_ID),
	constraint FK_POINT_MUTATION_MUTATION_ID foreign key (POINT_MUTATION_MUTATION_ID) references TB_MUTATION (MUTATION_ID) on delete no action on update no action,

	unique key KY_POINT_MUTATION_MUTATION_ID_OFFSET (POINT_MUTATION_MUTATION_ID, POINT_MUTATION_OFFSET)
);

create table TB_POINT_MUTATION_LOG (
	POINT_MUTATION_LOG_ID int(10) unsigned not null auto_increment,
	POINT_MUTATION_LOG_OPERATION enum('INSERT','UPDATE','DELETE'),
	POINT_MUTATION_LOG_DATE timestamp not null default current_timestamp,

	POINT_MUTATION_LOG_POINT_MUTATION_ID int(10) unsigned not null,

	POINT_MUTATION_LOG_OLD_MUTATION_ID int(10) unsigned null,
	POINT_MUTATION_LOG_OLD_OFFSET int(10) unsigned null,
	POINT_MUTATION_LOG_OLD_RESIDUE char(1) null,

	POINT_MUTATION_LOG_NEW_MUTATION_ID int(10) unsigned null,
	POINT_MUTATION_LOG_NEW_OFFSET int(10) unsigned null,
	POINT_MUTATION_LOG_NEW_RESIDUE char(1) null,

	primary key (POINT_MUTATION_LOG_ID)
);

create trigger TG_POINT_MUTATION_INSERT after insert on TB_POINT_MUTATION
	for each row
		insert into TB_POINT_MUTATION_LOG (
			POINT_MUTATION_LOG_OPERATION,
			POINT_MUTATION_LOG_POINT_MUTATION_ID,
			POINT_MUTATION_LOG_OLD_MUTATION_ID,
			POINT_MUTATION_LOG_OLD_OFFSET,
			POINT_MUTATION_LOG_OLD_RESIDUE,
			POINT_MUTATION_LOG_NEW_MUTATION_ID,
			POINT_MUTATION_LOG_NEW_OFFSET,
			POINT_MUTATION_LOG_NEW_RESIDUE
		) values (
			'INSERT',
			new.POINT_MUTATION_ID,
			null,
			null,
			null,
			new.POINT_MUTATION_MUTATION_ID,
			new.POINT_MUTATION_OFFSET,
			new.POINT_MUTATION_RESIDUE
		);

create trigger TG_POINT_MUTATION_UPDATE after update on TB_POINT_MUTATION
	for each row
		insert into TB_POINT_MUTATION_LOG (
			POINT_MUTATION_LOG_OPERATION,
			POINT_MUTATION_LOG_POINT_MUTATION_ID,
			POINT_MUTATION_LOG_OLD_MUTATION_ID,
			POINT_MUTATION_LOG_OLD_OFFSET,
			POINT_MUTATION_LOG_OLD_RESIDUE,
			POINT_MUTATION_LOG_NEW_MUTATION_ID,
			POINT_MUTATION_LOG_NEW_OFFSET,
			POINT_MUTATION_LOG_NEW_RESIDUE
		) values (
			'UPDATE',
			new.POINT_MUTATION_ID,
			old.POINT_MUTATION_MUTATION_ID,
			old.POINT_MUTATION_OFFSET,
			old.POINT_MUTATION_RESIDUE,
			new.POINT_MUTATION_MUTATION_ID,
			new.POINT_MUTATION_OFFSET,
			new.POINT_MUTATION_RESIDUE
		);

create trigger TG_POINT_MUTATION_DELETE before delete on TB_POINT_MUTATION
	for each row
		insert into TB_POINT_MUTATION_LOG (
			POINT_MUTATION_LOG_OPERATION,
			POINT_MUTATION_LOG_POINT_MUTATION_ID,
			POINT_MUTATION_LOG_OLD_MUTATION_ID,
			POINT_MUTATION_LOG_OLD_OFFSET,
			POINT_MUTATION_LOG_OLD_RESIDUE,
			POINT_MUTATION_LOG_NEW_MUTATION_ID,
			POINT_MUTATION_LOG_NEW_OFFSET,
			POINT_MUTATION_LOG_NEW_RESIDUE
		) values (
			'DELETE',
			old.POINT_MUTATION_ID,
			old.POINT_MUTATION_MUTATION_ID,
			old.POINT_MUTATION_OFFSET,
			old.POINT_MUTATION_RESIDUE,
			null,
			null,
			null
		);

/*****
The table of structures
******/
create table TB_STRUCTURE (
	STRUCTURE_ID int(10) unsigned not null auto_increment,

	STRUCTURE_PROTEIN_ID int(10) unsigned not null,
	STRUCTURE_FILE_TYPE enum('CIF1', 'CIF2', 'MMCIF', 'PDB', 'MMTF'),
	STRUCTURE_DATABANK_ID varchar(256) not null default '',
	STRUCTURE_FILE varchar(256) not null,

	STRUCTURE_CREATION timestamp not null default current_timestamp,

	primary key (STRUCTURE_ID),

	key KY_STRUCTURE_PROTEIN_ID (STRUCTURE_PROTEIN_ID),
	constraint FK_STRUCTURE_PROTEIN_ID foreign key (STRUCTURE_PROTEIN_ID) references TB_PROTEIN (PROTEIN_ID) on delete no action on update no action
);

create table TB_STRUCTURE_LOG (
	STRUCTURE_LOG_ID int(10) unsigned not null auto_increment,
	STRUCTURE_LOG_OPERATION enum('INSERT','UPDATE','DELETE'),
	STRUCTURE_LOG_DATE timestamp not null default current_timestamp,

	STRUCTURE_LOG_STRUCTURE_ID int(10) unsigned not null,

	STRUCTURE_LOG_OLD_PROTEIN_ID int(10) unsigned null,
	STRUCTURE_LOG_OLD_STRUCTURE_FILE_TYPE enum('CIF1', 'CIF2', 'MMCIF', 'PDB', 'MMTF') null,
	STRUCTURE_LOG_OLD_STRUCTURE_DATABANK_ID varchar(256) null,
	STRUCTURE_LOG_OLD_STRUCTURE_FILE varchar(256) null,

	STRUCTURE_LOG_NEW_PROTEIN_ID int(10) unsigned null,
	STRUCTURE_LOG_NEW_STRUCTURE_FILE_TYPE enum('CIF1', 'CIF2', 'MMCIF', 'PDB', 'MMTF') null,
	STRUCTURE_LOG_NEW_STRUCTURE_DATABANK_ID varchar(256) null,
	STRUCTURE_LOG_NEW_STRUCTURE_FILE varchar(256) null,

	primary key (STRUCTURE_LOG_ID)
);

create trigger TG_STRUCTURE_INSERT after insert on TB_STRUCTURE
	for each row
		insert into TB_STRUCTURE_LOG (
			STRUCTURE_LOG_OPERATION,
			STRUCTURE_LOG_STRUCTURE_ID,
			STRUCTURE_LOG_OLD_PROTEIN_ID,
			STRUCTURE_LOG_OLD_STRUCTURE_FILE_TYPE,
			STRUCTURE_LOG_OLD_STRUCTURE_DATABANK_ID,
			STRUCTURE_LOG_OLD_STRUCTURE_FILE,
			STRUCTURE_LOG_NEW_PROTEIN_ID,
			STRUCTURE_LOG_NEW_STRUCTURE_FILE_TYPE,
			STRUCTURE_LOG_NEW_STRUCTURE_DATABANK_ID,
			STRUCTURE_LOG_NEW_STRUCTURE_FILE
		) values (
			'INSERT',
			new.STRUCTURE_ID,
			null,
			null,
			null,
			null,
			new.STRUCTURE_PROTEIN_ID,
			new.STRUCTURE_FILE_TYPE,
			new.STRUCTURE_DATABANK_ID,
			new.STRUCTURE_FILE
		);

create trigger TG_STRUCTURE_UPDATE after update on TB_STRUCTURE
	for each row
		insert into TB_STRUCTURE_LOG (
			STRUCTURE_LOG_OPERATION,
			STRUCTURE_LOG_STRUCTURE_ID,
			STRUCTURE_LOG_OLD_PROTEIN_ID,
			STRUCTURE_LOG_OLD_STRUCTURE_FILE_TYPE,
			STRUCTURE_LOG_OLD_STRUCTURE_DATABANK_ID,
			STRUCTURE_LOG_OLD_STRUCTURE_FILE,
			STRUCTURE_LOG_NEW_PROTEIN_ID,
			STRUCTURE_LOG_NEW_STRUCTURE_FILE_TYPE,
			STRUCTURE_LOG_NEW_STRUCTURE_DATABANK_ID,
			STRUCTURE_LOG_NEW_STRUCTURE_FILE
		) values (
			'UPDATE',
			new.STRUCTURE_ID,
			old.STRUCTURE_PROTEIN_ID,
			old.STRUCTURE_FILE_TYPE,
			old.STRUCTURE_DATABANK_ID,
			old.STRUCTURE_FILE,
			new.STRUCTURE_PROTEIN_ID,
			new.STRUCTURE_FILE_TYPE,
			new.STRUCTURE_DATABANK_ID,
			new.STRUCTURE_FILE
		);

create trigger TG_STRUCTURE_DELETE before delete on TB_STRUCTURE
	for each row
		insert into TB_STRUCTURE_LOG (
			STRUCTURE_LOG_OPERATION,
			STRUCTURE_LOG_STRUCTURE_ID,
			STRUCTURE_LOG_OLD_PROTEIN_ID,
			STRUCTURE_LOG_OLD_STRUCTURE_FILE_TYPE,
			STRUCTURE_LOG_OLD_STRUCTURE_DATABANK_ID,
			STRUCTURE_LOG_OLD_STRUCTURE_FILE,
			STRUCTURE_LOG_NEW_PROTEIN_ID,
			STRUCTURE_LOG_NEW_STRUCTURE_FILE_TYPE,
			STRUCTURE_LOG_NEW_STRUCTURE_DATABANK_ID,
			STRUCTURE_LOG_NEW_STRUCTURE_FILE
		) values (
			'DELETE',
			old.STRUCTURE_ID,
			old.STRUCTURE_PROTEIN_ID,
			old.STRUCTURE_FILE_TYPE,
			old.STRUCTURE_DATABANK_ID,
			old.STRUCTURE_FILE,
			null,
			null,
			null,
			null
		);

/*****
The table of chains
******/
create table TB_CHAIN (
	CHAIN_ID int(10) unsigned not null auto_increment,

	CHAIN_STRUCTURE_ID int(10) unsigned not null,
	CHAIN_NAME varchar(5) not null,
	CHAIN_SEQUENCE text not null,

	CHAIN_CREATION timestamp not null default current_timestamp,

	primary key ( CHAIN_ID ),

	unique key KY_CHAIN_STRUCTURE_ID_NAME ( CHAIN_STRUCTURE_ID, CHAIN_NAME ),

	index IX_CHAIN_NAME ( CHAIN_NAME )
);

create table TB_CHAIN_LOG (
	CHAIN_LOG_ID int(10) unsigned not null auto_increment,
	CHAIN_LOG_OPERATION enum('INSERT','UPDATE','DELETE'),
	CHAIN_LOG_DATE timestamp not null default current_timestamp,

	CHAIN_LOG_CHAIN_ID int(10) unsigned not null,

	CHAIN_LOG_OLD_STRUCTURE_ID int(10) unsigned null,
	CHAIN_LOG_OLD_NAME varchar(5) null,
	CHAIN_LOG_OLD_SEQUENCE text null,

	CHAIN_LOG_NEW_STRUCTURE_ID int(10) unsigned null,
	CHAIN_LOG_NEW_NAME varchar(5) null,
	CHAIN_LOG_NEW_SEQUENCE text null,

	primary key (CHAIN_LOG_ID)
);

create trigger TG_CHAIN_INSERT after insert on TB_CHAIN
	for each row
		insert into TB_CHAIN_LOG (
			CHAIN_LOG_OPERATION,
			CHAIN_LOG_CHAIN_ID,
			CHAIN_LOG_OLD_STRUCTURE_ID,
			CHAIN_LOG_OLD_NAME,
			CHAIN_LOG_OLD_SEQUENCE,
			CHAIN_LOG_NEW_STRUCTURE_ID,
			CHAIN_LOG_NEW_NAME,
			CHAIN_LOG_NEW_SEQUENCE
		) values (
			'INSERT',
			new.CHAIN_ID,
			null,
			null,
			null,
			new.CHAIN_STRUCTURE_ID,
			new.CHAIN_NAME,
			new.CHAIN_SEQUENCE
		);

create trigger TG_CHAIN_UPDATE after update on TB_CHAIN
	for each row
		insert into TB_CHAIN_LOG (
			CHAIN_LOG_OPERATION,
			CHAIN_LOG_CHAIN_ID,
			CHAIN_LOG_OLD_STRUCTURE_ID,
			CHAIN_LOG_OLD_NAME,
			CHAIN_LOG_OLD_SEQUENCE,
			CHAIN_LOG_NEW_STRUCTURE_ID,
			CHAIN_LOG_NEW_NAME,
			CHAIN_LOG_NEW_SEQUENCE
		) values (
			'UPDATE',
			new.CHAIN_ID,
			old.CHAIN_STRUCTURE_ID,
			old.CHAIN_NAME,
			old.CHAIN_SEQUENCE,
			new.CHAIN_STRUCTURE_ID,
			new.CHAIN_NAME,
			new.CHAIN_SEQUENCE
		);

create trigger TG_CHAIN_DELETE after delete on TB_CHAIN
	for each row
		insert into TB_CHAIN_LOG (
			CHAIN_LOG_OPERATION,
			CHAIN_LOG_CHAIN_ID,
			CHAIN_LOG_OLD_STRUCTURE_ID,
			CHAIN_LOG_OLD_NAME,
			CHAIN_LOG_OLD_SEQUENCE,
			CHAIN_LOG_NEW_STRUCTURE_ID,
			CHAIN_LOG_NEW_NAME,
			CHAIN_LOG_NEW_SEQUENCE
		) values (
			'DELETE',
			old.CHAIN_ID,
			old.CHAIN_STRUCTURE_ID,
			old.CHAIN_NAME,
			old.CHAIN_SEQUENCE,
			null,
			null,
			null
		);

/*****
The table of alignments between chains and sequences
******/
create table TB_CHAIN_SEQUENCE (
	CHAIN_SEQUENCE_CHAIN_ID int(10) unsigned not null,
	CHAIN_SEQUENCE_SEQUENCE_ID int(10) unsigned not null,

	CHAIN_SEQUENCE_CHAIN_OFFSET_BEGIN int(10) unsigned not null,
	CHAIN_SEQUENCE_CHAIN_OFFSET_END int(10) unsigned not null,
	CHAIN_SEQUENCE_AUTHOR_OFFSET_BEGIN varchar(255) not null,
	CHAIN_SEQUENCE_AUTHOR_OFFSET_END varchar(255) not null,
	CHAIN_SEQUENCE_SEQUENCE_OFFSET_BEGIN int(10) unsigned not null,
	CHAIN_SEQUENCE_SEQUENCE_OFFSET_END int(10) unsigned not null,

	CHAIN_SEQUENCE_ALIGNED_CHAIN text not null,
	CHAIN_SEQUENCE_ALIGNED_SEQUENCE text not null,
	CHAIN_SEQUENCE_SCORE float not null,

	CHAIN_SEQUENCE_CREATION timestamp not null default current_timestamp,

	primary key ( CHAIN_SEQUENCE_CHAIN_ID, CHAIN_SEQUENCE_SEQUENCE_ID ),

	key KY_CHAIN_SEQUENCE_CHAIN_ID ( CHAIN_SEQUENCE_CHAIN_ID ),
	constraint FK_CHAIN_SEQUENCE_CHAIN_ID foreign key ( CHAIN_SEQUENCE_CHAIN_ID ) references TB_CHAIN ( CHAIN_ID ) on delete no action on update no action,

	key KY_CHAIN_SEQUENCE_SEQUENCE_ID ( CHAIN_SEQUENCE_SEQUENCE_ID ),
	constraint FK_CHAIN_SEQUENCE_SEQUENCE_ID foreign key ( CHAIN_SEQUENCE_SEQUENCE_ID ) references TB_SEQUENCE ( SEQUENCE_ID ) on delete no action on update no action
);

create table TB_CHAIN_SEQUENCE_LOG (
	CHAIN_SEQUENCE_LOG_ID int(10) unsigned not null auto_increment,
	CHAIN_SEQUENCE_LOG_OPERATION enum('INSERT','UPDATE','DELETE'),
	CHAIN_SEQUENCE_LOG_DATE timestamp not null default current_timestamp,

	CHAIN_SEQUENCE_LOG_CHAIN_SEQUENCE_CHAIN_ID int(10) unsigned not null,
	CHAIN_SEQUENCE_LOG_CHAIN_SEQUENCE_SEQUENCE_ID int(10) unsigned not null,

	CHAIN_SEQUENCE_LOG_OLD_CHAIN_OFFSET_BEGIN int(10) unsigned null,
	CHAIN_SEQUENCE_LOG_OLD_CHAIN_OFFSET_END int(10) unsigned null,
	CHAIN_SEQUENCE_LOG_OLD_AUTHOR_OFFSET_BEGIN varchar(255) null,
	CHAIN_SEQUENCE_LOG_OLD_AUTHOR_OFFSET_END varchar(255) null,
	CHAIN_SEQUENCE_LOG_OLD_SEQUENCE_OFFSET_BEGIN int(10) unsigned null,
	CHAIN_SEQUENCE_LOG_OLD_SEQUENCE_OFFSET_END int(10) unsigned null,
	CHAIN_SEQUENCE_LOG_OLD_ALIGNED_CHAIN text null,
	CHAIN_SEQUENCE_LOG_OLD_ALIGNED_SEQUENCE text null,
	CHAIN_SEQUENCE_LOG_OLD_SCORE float null,

	CHAIN_SEQUENCE_LOG_NEW_CHAIN_OFFSET_BEGIN int(10) unsigned null,
	CHAIN_SEQUENCE_LOG_NEW_CHAIN_OFFSET_END int(10) unsigned null,
	CHAIN_SEQUENCE_LOG_NEW_AUTHOR_OFFSET_BEGIN varchar(255) null,
	CHAIN_SEQUENCE_LOG_NEW_AUTHOR_OFFSET_END varchar(255) null,
	CHAIN_SEQUENCE_LOG_NEW_SEQUENCE_OFFSET_BEGIN int(10) unsigned null,
	CHAIN_SEQUENCE_LOG_NEW_SEQUENCE_OFFSET_END int(10) unsigned null,
	CHAIN_SEQUENCE_LOG_NEW_ALIGNED_CHAIN text null,
	CHAIN_SEQUENCE_LOG_NEW_ALIGNED_SEQUENCE text null,
	CHAIN_SEQUENCE_LOG_NEW_SCORE float null,

	primary key ( CHAIN_SEQUENCE_LOG_ID )
);

create trigger TG_CHAIN_SEQUENCE_INSERT after insert on TB_CHAIN_SEQUENCE
	for each row
		insert into TB_CHAIN_SEQUENCE_LOG (
			CHAIN_SEQUENCE_LOG_OPERATION,
			CHAIN_SEQUENCE_LOG_CHAIN_SEQUENCE_CHAIN_ID,
			CHAIN_SEQUENCE_LOG_CHAIN_SEQUENCE_SEQUENCE_ID,
			CHAIN_SEQUENCE_LOG_OLD_CHAIN_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_OLD_CHAIN_OFFSET_END,
			CHAIN_SEQUENCE_LOG_OLD_AUTHOR_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_OLD_AUTHOR_OFFSET_END,
			CHAIN_SEQUENCE_LOG_OLD_SEQUENCE_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_OLD_SEQUENCE_OFFSET_END,
			CHAIN_SEQUENCE_LOG_OLD_ALIGNED_CHAIN,
			CHAIN_SEQUENCE_LOG_OLD_ALIGNED_SEQUENCE,
			CHAIN_SEQUENCE_LOG_OLD_SCORE,
			CHAIN_SEQUENCE_LOG_NEW_CHAIN_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_NEW_CHAIN_OFFSET_END,
			CHAIN_SEQUENCE_LOG_NEW_AUTHOR_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_NEW_AUTHOR_OFFSET_END,
			CHAIN_SEQUENCE_LOG_NEW_SEQUENCE_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_NEW_SEQUENCE_OFFSET_END,
			CHAIN_SEQUENCE_LOG_NEW_ALIGNED_CHAIN,
			CHAIN_SEQUENCE_LOG_NEW_ALIGNED_SEQUENCE,
			CHAIN_SEQUENCE_LOG_NEW_SCORE
		) values (
			'INSERT',
			new.CHAIN_SEQUENCE_CHAIN_ID,
			new.CHAIN_SEQUENCE_SEQUENCE_ID,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			new.CHAIN_SEQUENCE_CHAIN_OFFSET_BEGIN,
			new.CHAIN_SEQUENCE_CHAIN_OFFSET_END,
			new.CHAIN_SEQUENCE_AUTHOR_OFFSET_BEGIN,
			new.CHAIN_SEQUENCE_AUTHOR_OFFSET_END,
			new.CHAIN_SEQUENCE_SEQUENCE_OFFSET_BEGIN,
			new.CHAIN_SEQUENCE_SEQUENCE_OFFSET_END,
			new.CHAIN_SEQUENCE_ALIGNED_CHAIN,
			new.CHAIN_SEQUENCE_ALIGNED_SEQUENCE,
			new.CHAIN_SEQUENCE_SCORE
		);

create trigger TG_CHAIN_SEQUENCE_UPDATE after update on TB_CHAIN_SEQUENCE
	for each row
		insert into TB_CHAIN_SEQUENCE_LOG (
			CHAIN_SEQUENCE_LOG_OPERATION,
			CHAIN_SEQUENCE_LOG_CHAIN_SEQUENCE_CHAIN_ID,
			CHAIN_SEQUENCE_LOG_CHAIN_SEQUENCE_SEQUENCE_ID,
			CHAIN_SEQUENCE_LOG_OLD_CHAIN_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_OLD_CHAIN_OFFSET_END,
			CHAIN_SEQUENCE_LOG_OLD_AUTHOR_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_OLD_AUTHOR_OFFSET_END,
			CHAIN_SEQUENCE_LOG_OLD_SEQUENCE_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_OLD_SEQUENCE_OFFSET_END,
			CHAIN_SEQUENCE_LOG_OLD_ALIGNED_CHAIN,
			CHAIN_SEQUENCE_LOG_OLD_ALIGNED_SEQUENCE,
			CHAIN_SEQUENCE_LOG_OLD_SCORE,
			CHAIN_SEQUENCE_LOG_NEW_CHAIN_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_NEW_CHAIN_OFFSET_END,
			CHAIN_SEQUENCE_LOG_NEW_AUTHOR_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_NEW_AUTHOR_OFFSET_END,
			CHAIN_SEQUENCE_LOG_NEW_SEQUENCE_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_NEW_SEQUENCE_OFFSET_END,
			CHAIN_SEQUENCE_LOG_NEW_ALIGNED_CHAIN,
			CHAIN_SEQUENCE_LOG_NEW_ALIGNED_SEQUENCE,
			CHAIN_SEQUENCE_LOG_NEW_SCORE
		) values (
			'UPDATE',
			new.CHAIN_SEQUENCE_CHAIN_ID,
			new.CHAIN_SEQUENCE_SEQUENCE_ID,
			old.CHAIN_SEQUENCE_CHAIN_OFFSET_BEGIN,
			old.CHAIN_SEQUENCE_CHAIN_OFFSET_END,
			old.CHAIN_SEQUENCE_AUTHOR_OFFSET_BEGIN,
			old.CHAIN_SEQUENCE_AUTHOR_OFFSET_END,
			old.CHAIN_SEQUENCE_SEQUENCE_OFFSET_BEGIN,
			old.CHAIN_SEQUENCE_SEQUENCE_OFFSET_END,
			old.CHAIN_SEQUENCE_ALIGNED_CHAIN,
			old.CHAIN_SEQUENCE_ALIGNED_SEQUENCE,
			old.CHAIN_SEQUENCE_SCORE,
			new.CHAIN_SEQUENCE_CHAIN_OFFSET_BEGIN,
			new.CHAIN_SEQUENCE_CHAIN_OFFSET_END,
			new.CHAIN_SEQUENCE_AUTHOR_OFFSET_BEGIN,
			new.CHAIN_SEQUENCE_AUTHOR_OFFSET_END,
			new.CHAIN_SEQUENCE_SEQUENCE_OFFSET_BEGIN,
			new.CHAIN_SEQUENCE_SEQUENCE_OFFSET_END,
			new.CHAIN_SEQUENCE_ALIGNED_CHAIN,
			new.CHAIN_SEQUENCE_ALIGNED_SEQUENCE,
			new.CHAIN_SEQUENCE_SCORE
		);

create trigger TG_CHAIN_SEQUENCE_DELETE after delete on TB_CHAIN_SEQUENCE
	for each row
		insert into TB_CHAIN_SEQUENCE_LOG (
			CHAIN_SEQUENCE_LOG_OPERATION,
			CHAIN_SEQUENCE_LOG_CHAIN_SEQUENCE_CHAIN_ID,
			CHAIN_SEQUENCE_LOG_CHAIN_SEQUENCE_SEQUENCE_ID,
			CHAIN_SEQUENCE_LOG_OLD_CHAIN_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_OLD_CHAIN_OFFSET_END,
			CHAIN_SEQUENCE_LOG_OLD_AUTHOR_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_OLD_AUTHOR_OFFSET_END,
			CHAIN_SEQUENCE_LOG_OLD_SEQUENCE_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_OLD_SEQUENCE_OFFSET_END,
			CHAIN_SEQUENCE_LOG_OLD_ALIGNED_CHAIN,
			CHAIN_SEQUENCE_LOG_OLD_ALIGNED_SEQUENCE,
			CHAIN_SEQUENCE_LOG_OLD_SCORE,
			CHAIN_SEQUENCE_LOG_NEW_CHAIN_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_NEW_CHAIN_OFFSET_END,
			CHAIN_SEQUENCE_LOG_NEW_AUTHOR_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_NEW_AUTHOR_OFFSET_END,
			CHAIN_SEQUENCE_LOG_NEW_SEQUENCE_OFFSET_BEGIN,
			CHAIN_SEQUENCE_LOG_NEW_SEQUENCE_OFFSET_END,
			CHAIN_SEQUENCE_LOG_NEW_ALIGNED_CHAIN,
			CHAIN_SEQUENCE_LOG_NEW_ALIGNED_SEQUENCE,
			CHAIN_SEQUENCE_LOG_NEW_SCORE
		) values (
			'DELETE',
			old.CHAIN_SEQUENCE_CHAIN_ID,
			old.CHAIN_SEQUENCE_SEQUENCE_ID,
			old.CHAIN_SEQUENCE_CHAIN_OFFSET_BEGIN,
			old.CHAIN_SEQUENCE_CHAIN_OFFSET_END,
			old.CHAIN_SEQUENCE_AUTHOR_OFFSET_BEGIN,
			old.CHAIN_SEQUENCE_AUTHOR_OFFSET_END,
			old.CHAIN_SEQUENCE_SEQUENCE_OFFSET_BEGIN,
			old.CHAIN_SEQUENCE_SEQUENCE_OFFSET_END,
			old.CHAIN_SEQUENCE_ALIGNED_CHAIN,
			old.CHAIN_SEQUENCE_ALIGNED_SEQUENCE,
			old.CHAIN_SEQUENCE_SCORE,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null
		);

/*****
The table of jobs
******/
create table TB_JOB (
	JOB_ID int(10) unsigned not null auto_increment,

	JOB_UUID binary(16) not null,
	JOB_SEQUENCE_ID int(10) unsigned not null,
	JOB_MUTATION_ID int(10) unsigned null,
	JOB_STRUCTURE_ID int(10) unsigned null,

	JOB_CREATION timestamp not null default current_timestamp,

	primary key (JOB_ID),

	unique (JOB_UUID),

	key KY_JOB_SEQUENCE_ID (JOB_SEQUENCE_ID),
	constraint FK_JOB_SEQUENCE_ID foreign key (JOB_SEQUENCE_ID) references TB_SEQUENCE (SEQUENCE_ID) on delete no action on update no action,

	key KY_JOB_MUTATION_ID (JOB_MUTATION_ID),
	constraint FK_JOB_MUTATION_ID foreign key (JOB_MUTATION_ID) references TB_MUTATION (MUTATION_ID) on delete no action on update no action,

	key KY_JOB_STRUCTURE_ID (JOB_STRUCTURE_ID),
	constraint FK_JOB_STRUCTURE_ID foreign key (JOB_STRUCTURE_ID) references TB_STRUCTURE (STRUCTURE_ID) on delete no action on update no action
);

create table TB_JOB_LOG (
	JOB_LOG_ID int(10) unsigned not null auto_increment,
	JOB_LOG_OPERATION enum('INSERT','UPDATE','DELETE'),
	JOB_LOG_DATE timestamp not null default current_timestamp,

	JOB_LOG_JOB_ID int(10) unsigned not null,

	JOB_LOG_OLD_UUID binary(16) null,
	JOB_LOG_OLD_SEQUENCE_ID int(10) unsigned null,
	JOB_LOG_OLD_MUTATION_ID int(10) unsigned null,
	JOB_LOG_OLD_STRUCTURE_ID int(10) unsigned null,

	JOB_LOG_NEW_UUID binary(16) null,
	JOB_LOG_NEW_SEQUENCE_ID int(10) unsigned null,
	JOB_LOG_NEW_MUTATION_ID int(10) unsigned null,
	JOB_LOG_NEW_STRUCTURE_ID int(10) unsigned null,

	primary key (JOB_LOG_ID)
);

create trigger TG_JOB_INSERT after insert on TB_JOB
	for each row
		insert into TB_JOB_LOG (
			JOB_LOG_OPERATION,
			JOB_LOG_JOB_ID,
			JOB_LOG_OLD_UUID,
			JOB_LOG_OLD_SEQUENCE_ID,
			JOB_LOG_OLD_MUTATION_ID,
			JOB_LOG_OLD_STRUCTURE_ID,
			JOB_LOG_NEW_UUID,
			JOB_LOG_NEW_SEQUENCE_ID,
			JOB_LOG_NEW_MUTATION_ID,
			JOB_LOG_NEW_STRUCTURE_ID
		) values (
			'INSERT',
			new.JOB_ID,
			null,
			null,
			null,
			null,
			new.JOB_UUID,
			new.JOB_SEQUENCE_ID,
			new.JOB_MUTATION_ID,
			new.JOB_STRUCTURE_ID
		);

create trigger TG_JOB_UPDATE after update on TB_JOB
	for each row
		insert into TB_JOB_LOG (
			JOB_LOG_OPERATION,
			JOB_LOG_JOB_ID,
			JOB_LOG_OLD_UUID,
			JOB_LOG_OLD_SEQUENCE_ID,
			JOB_LOG_OLD_MUTATION_ID,
			JOB_LOG_OLD_STRUCTURE_ID,
			JOB_LOG_NEW_UUID,
			JOB_LOG_NEW_SEQUENCE_ID,
			JOB_LOG_NEW_MUTATION_ID,
			JOB_LOG_NEW_STRUCTURE_ID
		) values (
			'UPDATE',
			new.JOB_ID,
			old.JOB_UUID,
			old.JOB_SEQUENCE_ID,
			old.JOB_MUTATION_ID,
			old.JOB_STRUCTURE_ID,
			new.JOB_UUID,
			new.JOB_SEQUENCE_ID,
			new.JOB_MUTATION_ID,
			new.JOB_STRUCTURE_ID
		);

create trigger TG_JOB_DELETE before delete on TB_JOB
	for each row
		insert into TB_JOB_LOG (
			JOB_LOG_OPERATION,
			JOB_LOG_JOB_ID,
			JOB_LOG_OLD_UUID,
			JOB_LOG_OLD_SEQUENCE_ID,
			JOB_LOG_OLD_MUTATION_ID,
			JOB_LOG_OLD_STRUCTURE_ID,
			JOB_LOG_NEW_UUID,
			JOB_LOG_NEW_SEQUENCE_ID,
			JOB_LOG_NEW_MUTATION_ID,
			JOB_LOG_NEW_STRUCTURE_ID
		) values (
			'DELETE',
			old.JOB_ID,
			old.JOB_UUID,
			old.JOB_SEQUENCE_ID,
			old.JOB_MUTATION_ID,
			old.JOB_STRUCTURE_ID,
			null,
			null,
			null,
			null
		);

/*****
The table storing the results from Module1
*****/
create table TB_MODULE1(
	MODULE1_ID int(10) unsigned not null auto_increment,

	MODULE1_SEQUENCE_ID int(10) unsigned not null,
	MODULE1_MUTATION_ID int(10) unsigned null,

	MODULE1_RESULT_A text,
	MODULE1_RESULT_B text,

	MODULE1_CREATION timestamp not null default current_timestamp,

	primary key (MODULE1_ID),

	unique key KY_MODULE1_SEQUENCE_ID_MUTATION_ID (MODULE1_SEQUENCE_ID, MODULE1_MUTATION_ID),

	key KY_MODULE1_SEQUENCE_ID (MODULE1_SEQUENCE_ID),
	constraint FK_MODULE1_SEQUENCE_ID foreign key (MODULE1_SEQUENCE_ID) references TB_SEQUENCE (SEQUENCE_ID) on delete no action on update no action,

	key KY_MODULE1_MUTATION_ID (MODULE1_MUTATION_ID),
	constraint FK_MODULE1_MUTATION_ID foreign key (MODULE1_MUTATION_ID) references TB_MUTATION (MUTATION_ID) on delete no action on update no action
);

/*****
The table storing the results from Module2
*****/
create table TB_MODULE2(
	MODULE2_ID int(10) unsigned not null auto_increment,

	MODULE2_SEQUENCE_ID int(10) unsigned not null,
	MODULE2_MUTATION_ID int(10) unsigned null,

	MODULE2_RESULT_A text,
	MODULE2_RESULT_B text,

	MODULE2_CREATION timestamp not null default current_timestamp,

	primary key (MODULE2_ID),

	unique key KY_MODULE2_SEQUENCE_ID_MUTATION_ID (MODULE2_SEQUENCE_ID, MODULE2_MUTATION_ID),

	key KY_MODULE2_SEQUENCE_ID (MODULE2_SEQUENCE_ID),
	constraint FK_MODULE2_SEQUENCE_ID foreign key (MODULE2_SEQUENCE_ID) references TB_SEQUENCE (SEQUENCE_ID) on delete no action on update no action,

	key KY_MODULE2_MUTATION_ID (MODULE2_MUTATION_ID),
	constraint FK_MODULE2_MUTATION_ID foreign key (MODULE2_MUTATION_ID) references TB_MUTATION (MUTATION_ID) on delete no action on update no action
);

/*****
Viewing the informations from proteins and sequences
*****/
create view VW_PROTEIN_SEQUENCE as
	select

		TB_PROTEIN.PROTEIN_ID as PROTEIN_ID,
		TB_PROTEIN.PROTEIN_ENTRY_NAME as PROTEIN_ENTRY_NAME,
		TB_PROTEIN.PROTEIN_NAME as PROTEIN_NAME,
		TB_PROTEIN.PROTEIN_IS_WILD_TYPE as PROTEIN_IS_WILD_TYPE,
		TB_PROTEIN.PROTEIN_COMMENT as PROTEIN_COMMENT,
		TB_PROTEIN.PROTEIN_CREATION as PROTEIN_CREATION,

		TB_SEQUENCE.SEQUENCE_ID as SEQUENCE_ID,
		TB_SEQUENCE.SEQUENCE_RESIDUES as SEQUENCE_RESIDUES,
		TB_SEQUENCE.SEQUENCE_UNIPROT_ID as SEQUENCE_UNIPROT_ID,
		TB_SEQUENCE.SEQUENCE_ISOFORM_NUMBER as SEQUENCE_ISOFORM_NUMBER,
		TB_SEQUENCE.SEQUENCE_ISOFORM_NAME as SEQUENCE_ISOFORM_NAME,
		TB_SEQUENCE.SEQUENCE_CREATION as SEQUENCE_CREATION

	from TB_PROTEIN
		join TB_SEQUENCE on TB_PROTEIN.PROTEIN_ID = TB_SEQUENCE.SEQUENCE_PROTEIN_ID
;

/*****
Viewing the mutations and their residues
*****/
create view VW_MUTATION as
	select

		TB_MUTATION.MUTATION_ID as MUTATION_ID,
		TB_MUTATION.MUTATION_SEQUENCE_ID as MUTATION_SEQUENCE_ID,
		group_concat( concat( TB_POINT_MUTATION.POINT_MUTATION_OFFSET, TB_POINT_MUTATION.POINT_MUTATION_RESIDUE ) order by TB_POINT_MUTATION.POINT_MUTATION_OFFSET asc separator '' ) as MUTATION_OFFSETS_RESIDUES,
		TB_MUTATION.MUTATION_COMMENT as MUTATION_COMMENT,
		TB_MUTATION.MUTATION_MUTATED_SEQUENCE_ID as MUTATION_MUTATED_SEQUENCE_ID,
		TB_MUTATION.MUTATION_CREATION as MUTATION_CREATION

	from TB_MUTATION
		left join TB_POINT_MUTATION on TB_MUTATION.MUTATION_ID = TB_POINT_MUTATION.POINT_MUTATION_MUTATION_ID
		group by TB_POINT_MUTATION.POINT_MUTATION_MUTATION_ID
;

/*****
Viewing all the results relative to a sequence
*****/
create view VW_DISTRIBUTION_AUX as
	(
		select

			TB_SEQUENCE.SEQUENCE_ID as SEQUENCE_ID,
			TB_SEQUENCE.SEQUENCE_RESIDUES as SEQUENCE_RESIDUES,
			TB_SEQUENCE.SEQUENCE_UNIPROT_ID as SEQUENCE_UNIPROT_ID,
			TB_SEQUENCE.SEQUENCE_ISOFORM_NUMBER as SEQUENCE_ISOFORM_NUMBER,
			TB_SEQUENCE.SEQUENCE_ISOFORM_NAME as SEQUENCE_ISOFORM_NAME,
			TB_SEQUENCE.SEQUENCE_CREATION as SEQUENCE_CREATION,

			VW_MUTATION.MUTATION_ID as MUTATION_ID,
			VW_MUTATION.MUTATION_OFFSETS_RESIDUES as MUTATION_OFFSETS_RESIDUES,
			VW_MUTATION.MUTATION_COMMENT as MUTATION_COMMENT,
			VW_MUTATION.MUTATION_MUTATED_SEQUENCE_ID as MUTATION_MUTATED_SEQUENCE_ID,
			VW_MUTATION.MUTATION_CREATION as MUTATION_CREATION

		from TB_SEQUENCE
			join VW_MUTATION on VW_MUTATION.MUTATION_SEQUENCE_ID = TB_SEQUENCE.SEQUENCE_ID
	) union (
		select

			TB_SEQUENCE.SEQUENCE_ID as SEQUENCE_ID,
			TB_SEQUENCE.SEQUENCE_RESIDUES as SEQUENCE_RESIDUES,
			TB_SEQUENCE.SEQUENCE_UNIPROT_ID as SEQUENCE_UNIPROT_ID,
			TB_SEQUENCE.SEQUENCE_ISOFORM_NUMBER as SEQUENCE_ISOFORM_NUMBER,
			TB_SEQUENCE.SEQUENCE_ISOFORM_NAME as SEQUENCE_ISOFORM_NAME,
			TB_SEQUENCE.SEQUENCE_CREATION as SEQUENCE_CREATION,

			null as MUTATION_ID,
			null as MUTATION_OFFSETS_RESIDUES,
			null as MUTATION_COMMENT,
			null as MUTATION_MUTATED_SEQUENCE_ID,
			null as MUTATION_CREATION

		from TB_SEQUENCE
	)
;

create view VW_DISTRIBUTION as
	select

		VW_DISTRIBUTION_AUX.SEQUENCE_ID as SEQUENCE_ID,
		VW_DISTRIBUTION_AUX.SEQUENCE_RESIDUES as SEQUENCE_RESIDUES,
		VW_DISTRIBUTION_AUX.SEQUENCE_UNIPROT_ID as SEQUENCE_UNIPROT_ID,
		VW_DISTRIBUTION_AUX.SEQUENCE_ISOFORM_NUMBER as SEQUENCE_ISOFORM_NUMBER,
		VW_DISTRIBUTION_AUX.SEQUENCE_ISOFORM_NAME as SEQUENCE_ISOFORM_NAME,
		VW_DISTRIBUTION_AUX.SEQUENCE_CREATION as SEQUENCE_CREATION,

		VW_DISTRIBUTION_AUX.MUTATION_ID as MUTATION_ID,
		VW_DISTRIBUTION_AUX.MUTATION_OFFSETS_RESIDUES as MUTATION_OFFSETS_RESIDUES,
		VW_DISTRIBUTION_AUX.MUTATION_COMMENT as MUTATION_COMMENT,
		VW_DISTRIBUTION_AUX.MUTATION_MUTATED_SEQUENCE_ID as MUTATION_MUTATED_SEQUENCE_ID,
		VW_DISTRIBUTION_AUX.MUTATION_CREATION as MUTATION_CREATION,

		TB_MODULE1.MODULE1_ID as MODULE1_ID,

		TB_MODULE1.MODULE1_RESULT_A as MODULE1_RESULT_A,
		TB_MODULE1.MODULE1_RESULT_B as MODULE1_RESULT_B,

		TB_MODULE1.MODULE1_CREATION as MODULE1_CREATION,

		TB_MODULE2.MODULE2_ID as MODULE2_ID,

		TB_MODULE2.MODULE2_RESULT_A as MODULE2_RESULT_A,
		TB_MODULE2.MODULE2_RESULT_B as MODULE2_RESULT_B,

		TB_MODULE2.MODULE2_CREATION as MODULE2_CREATION

		from VW_DISTRIBUTION_AUX
			left join TB_MODULE1 on TB_MODULE1.MODULE1_SEQUENCE_ID = VW_DISTRIBUTION_AUX.SEQUENCE_ID and ( ( TB_MODULE1.MODULE1_MUTATION_ID is null and VW_DISTRIBUTION_AUX.MUTATION_ID is null ) or TB_MODULE1.MODULE1_MUTATION_ID = VW_DISTRIBUTION_AUX.MUTATION_ID )
			left join TB_MODULE2 on TB_MODULE2.MODULE2_SEQUENCE_ID = VW_DISTRIBUTION_AUX.SEQUENCE_ID and ( ( TB_MODULE2.MODULE2_MUTATION_ID is null and VW_DISTRIBUTION_AUX.MUTATION_ID is null ) or TB_MODULE2.MODULE2_MUTATION_ID = VW_DISTRIBUTION_AUX.MUTATION_ID )
;

/*****
Viewing the details and results relating to the jobs
*****/
create view VW_JOB as
	select

		TB_JOB.JOB_ID as JOB_ID,
		hex(TB_JOB.JOB_UUID) as JOB_UUID,
		TB_JOB.JOB_SEQUENCE_ID as SEQUENCE_ID,
		TB_JOB.JOB_MUTATION_ID as MUTATION_ID,
		TB_JOB.JOB_STRUCTURE_ID as STRUCTURE_ID,
		TB_JOB.JOB_CREATION as JOB_CREATION,

		TB_SEQUENCE.SEQUENCE_RESIDUES as SEQUENCE_RESIDUES,
		TB_SEQUENCE.SEQUENCE_UNIPROT_ID as SEQUENCE_UNIPROT_ID,
		TB_SEQUENCE.SEQUENCE_ISOFORM_NUMBER as SEQUENCE_ISOFORM_NUMBER,
		TB_SEQUENCE.SEQUENCE_ISOFORM_NAME as SEQUENCE_ISOFORM_NAME,
		TB_SEQUENCE.SEQUENCE_CREATION as SEQUENCE_CREATION,

		TB_PROTEIN.PROTEIN_ID as PROTEIN_ID,
		TB_PROTEIN.PROTEIN_ENTRY_NAME as PROTEIN_ENTRY_NAME,
		TB_PROTEIN.PROTEIN_NAME as PROTEIN_NAME,
		TB_PROTEIN.PROTEIN_IS_WILD_TYPE as PROTEIN_IS_WILD_TYPE,
		TB_PROTEIN.PROTEIN_CREATION as PROTEIN_CREATION,

		VW_MUTATION.MUTATION_OFFSETS_RESIDUES as MUTATION_OFFSETS_RESIDUES,
		VW_MUTATION.MUTATION_COMMENT as MUTATION_COMMENT,
		VW_MUTATION.MUTATION_MUTATED_SEQUENCE_ID as MUTATION_MUTATED_SEQUENCE_ID,
		VW_MUTATION.MUTATION_CREATION as MUTATION_CREATION,

		TB_STRUCTURE.STRUCTURE_FILE_TYPE as STRUCTURE_FILE_TYPE,
		TB_STRUCTURE.STRUCTURE_DATABANK_ID as STRUCTURE_DATABANK_ID,
		TB_STRUCTURE.STRUCTURE_FILE as STRUCTURE_FILE,
		TB_STRUCTURE.STRUCTURE_CREATION as STRUCTURE_CREATION,

/*****
joining with the results from Module1
******/
		TB_MODULE1.MODULE1_ID as MODULE1_ID,

		TB_MODULE1.MODULE1_RESULT_A as MODULE1_RESULT_A,
		TB_MODULE1.MODULE1_RESULT_B as MODULE1_RESULT_B,

		TB_MODULE1.MODULE1_CREATION as MODULE1_CREATION,

/*****
joining with the results from Module2
******/
		TB_MODULE2.MODULE2_ID as MODULE2_ID,

		TB_MODULE2.MODULE2_RESULT_A as MODULE2_RESULT_A,
		TB_MODULE2.MODULE2_RESULT_B as MODULE2_RESULT_B,

		TB_MODULE2.MODULE2_CREATION as MODULE2_CREATION

	from TB_JOB
		join TB_SEQUENCE on TB_JOB.JOB_SEQUENCE_ID = TB_SEQUENCE.SEQUENCE_ID
		join TB_PROTEIN on TB_SEQUENCE.SEQUENCE_PROTEIN_ID = TB_PROTEIN.PROTEIN_ID
		left join VW_MUTATION on TB_JOB.JOB_MUTATION_ID = VW_MUTATION.MUTATION_ID
		left join TB_STRUCTURE on TB_JOB.JOB_STRUCTURE_ID = TB_STRUCTURE.STRUCTURE_ID
		left join TB_MODULE1 on TB_JOB.JOB_SEQUENCE_ID = TB_MODULE1.MODULE1_SEQUENCE_ID
									and ((TB_JOB.JOB_MUTATION_ID is null and TB_MODULE1.MODULE1_MUTATION_ID is null)
											or TB_JOB.JOB_MUTATION_ID = TB_MODULE1.MODULE1_MUTATION_ID)
		left join TB_MODULE2 on TB_JOB.JOB_SEQUENCE_ID = TB_MODULE2.MODULE2_SEQUENCE_ID
									and ((TB_JOB.JOB_MUTATION_ID is null and TB_MODULE2.MODULE2_MUTATION_ID is null)
											or TB_JOB.JOB_MUTATION_ID = TB_MODULE2.MODULE2_MUTATION_ID)
;
